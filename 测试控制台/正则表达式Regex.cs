using System.Text.RegularExpressions;
namespace 测试控制台
{
    class 正则表达式
    {
        public static void c()
        {
            string str0 = "2/";
            string par_str0 = @"^(" + str0 + ")";
            string str = "666";
            string str3 = "101，102，103,104$";
            string par = @"\d{3,4}";
            string par3 = @"[，]";
            string par4 = @"\d+";
            // 一，常用方法：  
            //1.IsMatch判断是否为（3到4位的数字）  
            bool b = Regex.IsMatch(str, par);
            bool ceshi = Regex.IsMatch("2/1/3", par_str0);
            //2.Matches可计算匹配到的个数  
            int i3 = Regex.Matches(str3, par3).Count;
            //3.Match 返回第一个匹配项  
            string s4 = Regex.Match(str3, par4).Value;//或者Regex.Match(str3, par4).ToString();  
            // 二，RegEx类的实例  
            // 1,替换  
            string c = Regex.Replace("1人做事1人当", @"\d", "2");
            // str.Replace("\", "\\")用于简单的替换  
            string s20 = "1人做事1人当";
            string s21 = s20.Replace("1", "2");
            // 2，取值 利用小括号()分组  
            string line = "lane=1;speed=30.3mph;speed=32.2m/s;acceleration=2.5mph/s";
            MatchCollection matches = Regex.Matches(line, @"speed=([\d\.]+)(m/s|mph)");
            string a1 = matches[0].Groups[1].Value;//30.3  
            string a2 = matches[0].Groups[2].Value;//mph  
            string b1 = matches[1].Groups[1].Value;//32.2  
            string b2 = matches[1].Groups[2].Value;//m/s  

            string c1 = "31886-Academy.879010,894239,893367,157722-Academy.1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,883453,893373,894229";

            MatchCollection matches2 = Regex.Matches(c1, @"\d+[-]Academy[.]");
          string[] sss=  Regex.Split(c1, @"\d+[-]Academy[.]");

        }
    }
}